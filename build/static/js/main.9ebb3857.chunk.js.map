{"version":3,"sources":["App.js","index.js"],"names":["itemsFromBackend1","id","uuid","content","itemsFromBackend2","itemsFromBackend3","columnsFromBackend","name","items","App","useState","columns","setColumns","style","display","justifyContent","height","onDragEnd","result","destination","source","droppableId","sourceColumn","destColumn","sourceItems","destItem","splice","index","removed","column","copiedItems","Object","entries","map","flexDirection","alignItems","margin","provided","snapshot","droppableProps","ref","innerRef","background","isDraggingOver","padding","width","minHeight","item","draggableId","draggableProps","dragHandleProps","userSelect","backgroundColor","isDragging","color","placeholder","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9ebb3857.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd'\nimport uuid from 'uuid/dist/v4'\n\nconst itemsFromBackend1 = [\n  { id: uuid(), content: 'First Task' },\n  { id: uuid(), content: 'Second Tast' }\n]\n\nconst itemsFromBackend2 = [\n  { id: uuid(), content: 'First Task' },\n  { id: uuid(), content: 'Second Tast' },\n  { id: uuid(), content: 'Second Tast' },\n  { id: uuid(), content: 'Second Tast' }\n]\n\nconst itemsFromBackend3 = [\n  { id: uuid(), content: 'First Task' },\n  { id: uuid(), content: 'Second Tast' },\n  { id: uuid(), content: 'Second Tast' }\n]\n\nconst columnsFromBackend = {\n  [uuid()]: {\n    name: 'Todo',\n    items: itemsFromBackend1\n  },\n  [uuid()]: {\n    name: 'Backlog',\n    items: itemsFromBackend2\n  },\n  [uuid()]: {\n    name: 'Dead',\n    items: itemsFromBackend3\n  }\n\n}\n\nconst onDragEnd = (result, columns, setColumns) => {\n  if (!result.destination) return\n  const { source, destination } = result\n  if (source.droppableId !== destination.droppableId) {\n    const sourceColumn = columns[source.droppableId]\n    const destColumn = columns[destination.droppableId]\n    const sourceItems = [...sourceColumn.items]\n    const destItem = [...destColumn.items]\n    const [removed] = sourceItems.splice(source.index,1)  // at selected index.. remove 1 item\n    destItem.splice(destination.index, 0, removed)\n    setColumns({\n      ...columns,\n      [source.droppableId]:{\n        ...sourceColumn,\n        items:sourceItems\n      },\n      [destination.droppableId]:{\n        ...destColumn,\n        items: destItem\n\n      }\n    })\n  } else {\n    const column = columns[source.droppableId]\n    const copiedItems = [...column.items]\n    const [removed] = copiedItems.splice(source.index, 1)\n    copiedItems.splice(destination.index, 0, removed)\n    setColumns({\n      ...columns,\n      [source.droppableId]: {\n        ...column,\n        items: copiedItems\n      }\n    })\n  }\n}\n\nfunction App() {\n  const [columns, setColumns] = useState(columnsFromBackend)\n\n  return (\n    <div style={{ display: 'flex', justifyContent: 'center', height: '100%' }}>\n      <DragDropContext onDragEnd={result => onDragEnd(result, columns, setColumns)}>\n        {Object.entries(columns).map(([id, column]) => {\n          return (\n            <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n              <h2>{column.name}</h2>\n              <div style={{ margin: 7 }}>\n                <Droppable droppableId={id} key={id}>\n\n                  {(provided, snapshot) => {\n                    return (\n                      <div\n                        {...provided.droppableProps}\n                        ref={provided.innerRef}\n                        style={{\n                          background: snapshot.isDraggingOver ? 'lightblue' : 'lightgrey',\n                          padding: 4,\n                          width: 250,\n                          minHeight: 500\n                        }}\n                      >\n                        {column.items.map((item, index) => {\n                          return (\n                            <Draggable key={item.id} draggableId={item.id} index={index}>\n                              {(provided, snapshot) => {\n                                return (\n                                  <div\n                                    ref={provided.innerRef}\n                                    {...provided.draggableProps}\n                                    {...provided.dragHandleProps}\n                                    style={{\n                                      userSelect: 'none',\n                                      padding: 16,\n                                      margin: '0 0 8px 0',\n                                      minHeight: '50px',\n                                      backgroundColor: snapshot.isDragging ? '#263B4A' : '#456C86',\n                                      color: 'white',\n                                      ...provided.draggableProps.style\n                                    }}\n                                  >\n                                    {item.content}\n                                  </div>\n\n                                )\n                              }}\n                            </Draggable>\n                          )\n                        })}\n                        {provided.placeholder}\n                      </div>\n                    )\n                  }}\n                </Droppable>\n              </div>\n            </div>\n          )\n        })}\n\n      </DragDropContext>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}